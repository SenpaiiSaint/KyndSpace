// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) // Unique identifier for the user
  name          String? // User's chosen name
  email         String    @unique // User's email address for communication and login
  emailVerified Boolean   @default(false) // Whether the user's email has been verified
  image         String? // User's profile picture
  createdAt     DateTime  @default(now()) // Date and time when the user was created
  updatedAt     DateTime  @updatedAt // Date and time when the user was last updated
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user") // Added role field for authorization
  status        String    @default("active") // Added status field for user state
}

model Account {
  id                    String    @id @default(cuid()) // Unique identifier for the account
  userId                String    @unique // Added @unique to ensure one-to-one relationship
  accountId             String // Account ID associated with the user
  providerId            String // Provider ID associated with the account
  accessToken           String? // The access token of the account.Returned by the provider
  refreshToken          String? // The refresh token of the account.Returned by the provider
  accessTokenExpiresAt  DateTime? // The expiration date of the access token
  refreshTokenExpiresAt DateTime? // The expiration date of the refresh token
  scope                 String? // The scope of the account
  idToken               String? // The ID token of the account.Returned by the provider
  password              String? // The password of the account
  createdAt             DateTime  @default(now()) // Date and time when the account was created
  updatedAt             DateTime  @updatedAt // Date and time when the account was last updated
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid()) // Unique identifier for the session
  userId    String // User ID associated with the session
  token     String   @unique // The token of the session
  expiresAt DateTime // The expiration date of the session
  ipAddress String? // The IP address of the user
  userAgent String? // The user agent of the user
  createdAt DateTime @default(now()) // Date and time when the session was created
  updatedAt DateTime @updatedAt // Date and time when the session was last updated
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Verification {
  id         String   @id @default(cuid()) // Unique identifier for the verification
  identifier String // The identifier of the verification
  value      String // The value of the verification
  expiresAt  DateTime // The expiration date of the verification
  createdAt  DateTime @default(now()) // Date and time when the verification was created
  updatedAt  DateTime @updatedAt // Date and time when the verification was last updated

  @@index([identifier])
  @@index([value])
}
